module Ruvism
	module Rsm
		class Generator

			class Nasm
				include Base
				include Converter
				
				def initialize(name = 'untitled_code', systemName = 'nasm-generator')
					@code = "; generated by #{systemName}\n\n"
					@name = name
					self.indent = :default
					@need_indent = true
				end

				def filename
					@name+'.nasm'
				end

				def assemble
					(@result = `nasm #{self.filename}`).empty?
				end

				def oprand(opcode = :nop, *args)
					if opcode.is_a?(Symbol)
						# ハッシュオプション展開
						opr = []
						oprtype = :register
						if args.length >= 1 and args[0].is_a?(Hash)
							opts = args[0]
							opr[0] = opts[:register].to_s if opts[:register]
							unless opr[0]
								opr[0] = opts[:literal].to_s
								opr[0] = opts[:address].to_s unless opr[0]
								oprtype = :literal
							end
							opr[1] = opts[:value].to_s if opts[:value]
							opr[2] = opts[:index].to_s if opts[:index]
						else
							opr = args
						end
						# コード展開
						# case opcode
						# else
							self.add opcode, opr
						# end
					else
						self.add opcode, args
					end
				end

				def add(opcode = :nop, oprands = [])
					@code += "#{indent}#{opcode.to_s} #{oprands.join(',')}"
					nextLine
					opcode
				end

				def label(name = nil)
					name = "label_#{rand(36**8).to_s(36)}" unless name
					@code += "#{name}:"
					nextLine
					name
				end

				def sublabel(name = nil)
					name = "slabel_#{rand(36**8).to_s(36)}" unless name
					@code += ".#{name}"
					nextLine
					name
				end

				def indent
					@need_indent ? @indent : ''
				end

				def indent=(str)
					indentType = {
						default: "  ", tab: "\t"
					}
					@indent = str.is_a?(Symbol) ? indentType[str] : str.to_s
				end

				def nextLine
					@code += "\n"
					@need_indent = true
				end

				def times(to)
					@code += "#{indent}times #{to}-($-$$) "
					@need_indent = false
				end

				def bits(value)
					@code += "#{indent}[bits #{value}]"
					nextLine
				end
				
				private

			end
			addGenerator :nasm, Nasm

		end
	end
end
